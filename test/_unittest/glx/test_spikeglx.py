import sys
import unittest
from pathlib import Path
from typing import Final

import numpy as np

from neuralib.ephys.glx.spikeglx import GlxMeta, GlxRecording, GlxIndex

EXAMPLE_SPIKE_GLX_META = """
acqApLfSy=384,0,1
appVersion=20201103
fileCreateTime=2022-01-01T00:00:00
fileName=D:/DATA/example_g0_t0.imec0.ap.bin
fileSHA1=0000000000000000000000000000000000000000
fileSizeBytes=23100000
fileTimeSecs=1.0000000000000
firstSample=0
gateMode=Immediate
imAiRangeMax=0.5
imAiRangeMin=-0.5
imCalibrated=true
imDatApi=3.31
imDatBs_fw=2.0.137
imDatBsc_fw=3.2.176
imDatBsc_hw=2.1
imDatBsc_pn=NP2_QBSC_00
imDatBsc_sn=699
imDatFx_hw=1.8
imDatFx_pn=NPM_FLEX_0
imDatHs_fw=2.9
imDatHs_pn=NPM_HS_30
imDatHs_sn=00000000
imDatPrb_dock=1
imDatPrb_pn=NP2010
imDatPrb_port=4
imDatPrb_slot=2
imDatPrb_sn=00000000000
imDatPrb_type=24
imLEDEnable=false
imMaxInt=8192
imRoFile=D:/DATA/example.imro
imSampRate=30000
imStdby=
imTrgRising=true
imTrgSource=0
nDataDirs=1
nSavedChans=385
snsApLfSy=384,0,1
snsSaveChanSubset=0:384
syncImInputSlot=2
syncSourceIdx=0
syncSourcePeriod=1
trigMode=Immediate
typeImEnabled=2
typeNiEnabled=0
typeThis=imec
userNotes=
~imroTbl=(24,384)(0 2 0 0 96)(1 2 1 0 481)(2 2 1 0 482)(3 2 0 0 99)(4 2 0 0 100)(5 2 1 0 485)(6 2 1 0 486)(7 2 0 0 103)(8 2 0 0 104)(9 2 1 0 489)(10 2 1 0 490)(11 2 0 0 107)(12 2 0 0 108)(13 2 1 0 493)(14 2 1 0 494)(15 2 0 0 111)(16 2 0 0 112)(17 2 1 0 497)(18 2 1 0 498)(19 2 0 0 115)(20 2 0 0 116)(21 2 1 0 501)(22 2 1 0 502)(23 2 0 0 119)(24 2 0 0 120)(25 2 1 0 505)(26 2 1 0 506)(27 2 0 0 123)(28 2 0 0 124)(29 2 1 0 509)(30 2 1 0 510)(31 2 0 0 127)(32 2 0 0 128)(33 2 1 0 513)(34 2 1 0 514)(35 2 0 0 131)(36 2 0 0 132)(37 2 1 0 517)(38 2 1 0 518)(39 2 0 0 135)(40 2 0 0 136)(41 2 1 0 521)(42 2 1 0 522)(43 2 0 0 139)(44 2 0 0 140)(45 2 1 0 525)(46 2 1 0 526)(47 2 0 0 143)(48 2 0 0 192)(49 2 1 0 577)(50 2 1 0 578)(51 2 0 0 195)(52 2 0 0 196)(53 2 1 0 581)(54 2 1 0 582)(55 2 0 0 199)(56 2 0 0 200)(57 2 1 0 585)(58 2 1 0 586)(59 2 0 0 203)(60 2 0 0 204)(61 2 1 0 589)(62 2 1 0 590)(63 2 0 0 207)(64 2 0 0 208)(65 2 1 0 593)(66 2 1 0 594)(67 2 0 0 211)(68 2 0 0 212)(69 2 1 0 597)(70 2 1 0 598)(71 2 0 0 215)(72 2 0 0 216)(73 2 1 0 601)(74 2 1 0 602)(75 2 0 0 219)(76 2 0 0 220)(77 2 1 0 605)(78 2 1 0 606)(79 2 0 0 223)(80 2 0 0 224)(81 2 1 0 609)(82 2 1 0 610)(83 2 0 0 227)(84 2 0 0 228)(85 2 1 0 613)(86 2 1 0 614)(87 2 0 0 231)(88 2 0 0 232)(89 2 1 0 617)(90 2 1 0 618)(91 2 0 0 235)(92 2 0 0 236)(93 2 1 0 621)(94 2 1 0 622)(95 2 0 0 239)(96 2 0 0 144)(97 2 1 0 529)(98 2 1 0 530)(99 2 0 0 147)(100 2 0 0 148)(101 2 1 0 533)(102 2 1 0 534)(103 2 0 0 151)(104 2 0 0 152)(105 2 1 0 537)(106 2 1 0 538)(107 2 0 0 155)(108 2 0 0 156)(109 2 1 0 541)(110 2 1 0 542)(111 2 0 0 159)(112 2 0 0 160)(113 2 1 0 545)(114 2 1 0 546)(115 2 0 0 163)(116 2 0 0 164)(117 2 1 0 549)(118 2 1 0 550)(119 2 0 0 167)(120 2 0 0 168)(121 2 1 0 553)(122 2 1 0 554)(123 2 0 0 171)(124 2 0 0 172)(125 2 1 0 557)(126 2 1 0 558)(127 2 0 0 175)(128 2 0 0 176)(129 2 1 0 561)(130 2 1 0 562)(131 2 0 0 179)(132 2 0 0 180)(133 2 1 0 565)(134 2 1 0 566)(135 2 0 0 183)(136 2 0 0 184)(137 2 1 0 569)(138 2 1 0 570)(139 2 0 0 187)(140 2 0 0 188)(141 2 1 0 573)(142 2 1 0 574)(143 2 0 0 191)(144 2 0 0 240)(145 2 1 0 625)(146 2 1 0 626)(147 2 0 0 243)(148 2 0 0 244)(149 2 1 0 629)(150 2 1 0 630)(151 2 0 0 247)(152 2 0 0 248)(153 2 1 0 633)(154 2 1 0 634)(155 2 0 0 251)(156 2 0 0 252)(157 2 1 0 637)(158 2 1 0 638)(159 2 0 0 255)(160 2 0 0 256)(161 2 1 0 641)(162 2 1 0 642)(163 2 0 0 259)(164 2 0 0 260)(165 2 1 0 645)(166 2 1 0 646)(167 2 0 0 263)(168 2 0 0 264)(169 2 1 0 649)(170 2 1 0 650)(171 2 0 0 267)(172 2 0 0 268)(173 2 1 0 653)(174 2 1 0 654)(175 2 0 0 271)(176 2 0 0 272)(177 2 1 0 657)(178 2 1 0 658)(179 2 0 0 275)(180 2 0 0 276)(181 2 1 0 661)(182 2 1 0 662)(183 2 0 0 279)(184 2 0 0 280)(185 2 1 0 665)(186 2 1 0 666)(187 2 0 0 283)(188 2 0 0 284)(189 2 1 0 669)(190 2 1 0 670)(191 2 0 0 287)(192 2 0 0 0)(193 2 2 0 769)(194 2 1 0 386)(195 2 0 0 3)(196 2 0 0 4)(197 2 1 0 389)(198 2 1 0 390)(199 2 0 0 7)(200 2 0 0 8)(201 2 1 0 393)(202 2 1 0 394)(203 2 0 0 11)(204 2 0 0 12)(205 2 1 0 397)(206 2 1 0 398)(207 2 0 0 15)(208 2 0 0 16)(209 2 1 0 401)(210 2 1 0 402)(211 2 0 0 19)(212 2 0 0 20)(213 2 1 0 405)(214 2 1 0 406)(215 2 0 0 23)(216 2 0 0 24)(217 2 1 0 409)(218 2 1 0 410)(219 2 0 0 27)(220 2 0 0 28)(221 2 1 0 413)(222 2 1 0 414)(223 2 0 0 31)(224 2 0 0 32)(225 2 1 0 417)(226 2 1 0 418)(227 2 0 0 35)(228 2 0 0 36)(229 2 1 0 421)(230 2 1 0 422)(231 2 0 0 39)(232 2 0 0 40)(233 2 1 0 425)(234 2 1 0 426)(235 2 0 0 43)(236 2 0 0 44)(237 2 1 0 429)(238 2 1 0 430)(239 2 0 0 47)(240 2 0 0 288)(241 2 1 0 673)(242 2 1 0 674)(243 2 0 0 291)(244 2 0 0 292)(245 2 1 0 677)(246 2 1 0 678)(247 2 0 0 295)(248 2 0 0 296)(249 2 1 0 681)(250 2 1 0 682)(251 2 0 0 299)(252 2 0 0 300)(253 2 1 0 685)(254 2 1 0 686)(255 2 0 0 303)(256 2 0 0 304)(257 2 1 0 689)(258 2 1 0 690)(259 2 0 0 307)(260 2 0 0 308)(261 2 1 0 693)(262 2 1 0 694)(263 2 0 0 311)(264 2 0 0 312)(265 2 1 0 697)(266 2 1 0 698)(267 2 0 0 315)(268 2 0 0 316)(269 2 1 0 701)(270 2 1 0 702)(271 2 0 0 319)(272 2 0 0 320)(273 2 1 0 705)(274 2 1 0 706)(275 2 0 0 323)(276 2 0 0 324)(277 2 1 0 709)(278 2 1 0 710)(279 2 0 0 327)(280 2 0 0 328)(281 2 1 0 713)(282 2 1 0 714)(283 2 0 0 331)(284 2 0 0 332)(285 2 1 0 717)(286 2 1 0 718)(287 2 0 0 335)(288 2 0 0 48)(289 2 1 0 433)(290 2 1 0 434)(291 2 0 0 51)(292 2 0 0 52)(293 2 1 0 437)(294 2 1 0 438)(295 2 0 0 55)(296 2 0 0 56)(297 2 1 0 441)(298 2 1 0 442)(299 2 0 0 59)(300 2 0 0 60)(301 2 1 0 445)(302 2 1 0 446)(303 2 0 0 63)(304 2 0 0 64)(305 2 1 0 449)(306 2 1 0 450)(307 2 0 0 67)(308 2 0 0 68)(309 2 1 0 453)(310 2 1 0 454)(311 2 0 0 71)(312 2 0 0 72)(313 2 1 0 457)(314 2 1 0 458)(315 2 0 0 75)(316 2 0 0 76)(317 2 1 0 461)(318 2 1 0 462)(319 2 0 0 79)(320 2 0 0 80)(321 2 1 0 465)(322 2 1 0 466)(323 2 0 0 83)(324 2 0 0 84)(325 2 1 0 469)(326 2 1 0 470)(327 2 0 0 87)(328 2 0 0 88)(329 2 1 0 473)(330 2 1 0 474)(331 2 0 0 91)(332 2 0 0 92)(333 2 1 0 477)(334 2 1 0 478)(335 2 0 0 95)(336 2 0 0 336)(337 2 1 0 721)(338 2 1 0 722)(339 2 0 0 339)(340 2 0 0 340)(341 2 1 0 725)(342 2 1 0 726)(343 2 0 0 343)(344 2 0 0 344)(345 2 1 0 729)(346 2 1 0 730)(347 2 0 0 347)(348 2 0 0 348)(349 2 1 0 733)(350 2 1 0 734)(351 2 0 0 351)(352 2 0 0 352)(353 2 1 0 737)(354 2 1 0 738)(355 2 0 0 355)(356 2 0 0 356)(357 2 1 0 741)(358 2 1 0 742)(359 2 0 0 359)(360 2 0 0 360)(361 2 1 0 745)(362 2 1 0 746)(363 2 0 0 363)(364 2 0 0 364)(365 2 1 0 749)(366 2 1 0 750)(367 2 0 0 367)(368 2 0 0 368)(369 2 1 0 753)(370 2 1 0 754)(371 2 0 0 371)(372 2 0 0 372)(373 2 1 0 757)(374 2 1 0 758)(375 2 0 0 375)(376 2 0 0 376)(377 2 1 0 761)(378 2 1 0 762)(379 2 0 0 379)(380 2 0 0 380)(381 2 1 0 765)(382 2 1 0 766)(383 2 0 0 383)
~snsChanMap=(384,0,1)(AP0;0:48)(AP1;1:239)(AP2;2:240)(AP3;3:49)(AP4;4:50)(AP5;5:241)(AP6;6:242)(AP7;7:51)(AP8;8:52)(AP9;9:243)(AP10;10:244)(AP11;11:53)(AP12;12:54)(AP13;13:245)(AP14;14:246)(AP15;15:55)(AP16;16:56)(AP17;17:247)(AP18;18:248)(AP19;19:57)(AP20;20:58)(AP21;21:249)(AP22;22:250)(AP23;23:59)(AP24;24:60)(AP25;25:251)(AP26;26:252)(AP27;27:61)(AP28;28:62)(AP29;29:253)(AP30;30:254)(AP31;31:63)(AP32;32:64)(AP33;33:255)(AP34;34:256)(AP35;35:65)(AP36;36:66)(AP37;37:257)(AP38;38:258)(AP39;39:67)(AP40;40:68)(AP41;41:259)(AP42;42:260)(AP43;43:69)(AP44;44:70)(AP45;45:261)(AP46;46:262)(AP47;47:71)(AP48;48:96)(AP49;49:287)(AP50;50:288)(AP51;51:97)(AP52;52:98)(AP53;53:289)(AP54;54:290)(AP55;55:99)(AP56;56:100)(AP57;57:291)(AP58;58:292)(AP59;59:101)(AP60;60:102)(AP61;61:293)(AP62;62:294)(AP63;63:103)(AP64;64:104)(AP65;65:295)(AP66;66:296)(AP67;67:105)(AP68;68:106)(AP69;69:297)(AP70;70:298)(AP71;71:107)(AP72;72:108)(AP73;73:299)(AP74;74:300)(AP75;75:109)(AP76;76:110)(AP77;77:301)(AP78;78:302)(AP79;79:111)(AP80;80:112)(AP81;81:303)(AP82;82:304)(AP83;83:113)(AP84;84:114)(AP85;85:305)(AP86;86:306)(AP87;87:115)(AP88;88:116)(AP89;89:307)(AP90;90:308)(AP91;91:117)(AP92;92:118)(AP93;93:309)(AP94;94:310)(AP95;95:119)(AP96;96:72)(AP97;97:263)(AP98;98:264)(AP99;99:73)(AP100;100:74)(AP101;101:265)(AP102;102:266)(AP103;103:75)(AP104;104:76)(AP105;105:267)(AP106;106:268)(AP107;107:77)(AP108;108:78)(AP109;109:269)(AP110;110:270)(AP111;111:79)(AP112;112:80)(AP113;113:271)(AP114;114:272)(AP115;115:81)(AP116;116:82)(AP117;117:273)(AP118;118:274)(AP119;119:83)(AP120;120:84)(AP121;121:275)(AP122;122:276)(AP123;123:85)(AP124;124:86)(AP125;125:277)(AP126;126:278)(AP127;127:87)(AP128;128:88)(AP129;129:279)(AP130;130:280)(AP131;131:89)(AP132;132:90)(AP133;133:281)(AP134;134:282)(AP135;135:91)(AP136;136:92)(AP137;137:283)(AP138;138:284)(AP139;139:93)(AP140;140:94)(AP141;141:285)(AP142;142:286)(AP143;143:95)(AP144;144:120)(AP145;145:311)(AP146;146:312)(AP147;147:121)(AP148;148:122)(AP149;149:313)(AP150;150:314)(AP151;151:123)(AP152;152:124)(AP153;153:315)(AP154;154:316)(AP155;155:125)(AP156;156:126)(AP157;157:317)(AP158;158:318)(AP159;159:127)(AP160;160:128)(AP161;161:319)(AP162;162:320)(AP163;163:129)(AP164;164:130)(AP165;165:321)(AP166;166:322)(AP167;167:131)(AP168;168:132)(AP169;169:323)(AP170;170:324)(AP171;171:133)(AP172;172:134)(AP173;173:325)(AP174;174:326)(AP175;175:135)(AP176;176:136)(AP177;177:327)(AP178;178:328)(AP179;179:137)(AP180;180:138)(AP181;181:329)(AP182;182:330)(AP183;183:139)(AP184;184:140)(AP185;185:331)(AP186;186:332)(AP187;187:141)(AP188;188:142)(AP189;189:333)(AP190;190:334)(AP191;191:143)(AP192;192:0)(AP193;193:383)(AP194;194:192)(AP195;195:1)(AP196;196:2)(AP197;197:193)(AP198;198:194)(AP199;199:3)(AP200;200:4)(AP201;201:195)(AP202;202:196)(AP203;203:5)(AP204;204:6)(AP205;205:197)(AP206;206:198)(AP207;207:7)(AP208;208:8)(AP209;209:199)(AP210;210:200)(AP211;211:9)(AP212;212:10)(AP213;213:201)(AP214;214:202)(AP215;215:11)(AP216;216:12)(AP217;217:203)(AP218;218:204)(AP219;219:13)(AP220;220:14)(AP221;221:205)(AP222;222:206)(AP223;223:15)(AP224;224:16)(AP225;225:207)(AP226;226:208)(AP227;227:17)(AP228;228:18)(AP229;229:209)(AP230;230:210)(AP231;231:19)(AP232;232:20)(AP233;233:211)(AP234;234:212)(AP235;235:21)(AP236;236:22)(AP237;237:213)(AP238;238:214)(AP239;239:23)(AP240;240:144)(AP241;241:335)(AP242;242:336)(AP243;243:145)(AP244;244:146)(AP245;245:337)(AP246;246:338)(AP247;247:147)(AP248;248:148)(AP249;249:339)(AP250;250:340)(AP251;251:149)(AP252;252:150)(AP253;253:341)(AP254;254:342)(AP255;255:151)(AP256;256:152)(AP257;257:343)(AP258;258:344)(AP259;259:153)(AP260;260:154)(AP261;261:345)(AP262;262:346)(AP263;263:155)(AP264;264:156)(AP265;265:347)(AP266;266:348)(AP267;267:157)(AP268;268:158)(AP269;269:349)(AP270;270:350)(AP271;271:159)(AP272;272:160)(AP273;273:351)(AP274;274:352)(AP275;275:161)(AP276;276:162)(AP277;277:353)(AP278;278:354)(AP279;279:163)(AP280;280:164)(AP281;281:355)(AP282;282:356)(AP283;283:165)(AP284;284:166)(AP285;285:357)(AP286;286:358)(AP287;287:167)(AP288;288:24)(AP289;289:215)(AP290;290:216)(AP291;291:25)(AP292;292:26)(AP293;293:217)(AP294;294:218)(AP295;295:27)(AP296;296:28)(AP297;297:219)(AP298;298:220)(AP299;299:29)(AP300;300:30)(AP301;301:221)(AP302;302:222)(AP303;303:31)(AP304;304:32)(AP305;305:223)(AP306;306:224)(AP307;307:33)(AP308;308:34)(AP309;309:225)(AP310;310:226)(AP311;311:35)(AP312;312:36)(AP313;313:227)(AP314;314:228)(AP315;315:37)(AP316;316:38)(AP317;317:229)(AP318;318:230)(AP319;319:39)(AP320;320:40)(AP321;321:231)(AP322;322:232)(AP323;323:41)(AP324;324:42)(AP325;325:233)(AP326;326:234)(AP327;327:43)(AP328;328:44)(AP329;329:235)(AP330;330:236)(AP331;331:45)(AP332;332:46)(AP333;333:237)(AP334;334:238)(AP335;335:47)(AP336;336:168)(AP337;337:359)(AP338;338:360)(AP339;339:169)(AP340;340:170)(AP341;341:361)(AP342;342:362)(AP343;343:171)(AP344;344:172)(AP345;345:363)(AP346;346:364)(AP347;347:173)(AP348;348:174)(AP349;349:365)(AP350;350:366)(AP351;351:175)(AP352;352:176)(AP353;353:367)(AP354;354:368)(AP355;355:177)(AP356;356:178)(AP357;357:369)(AP358;358:370)(AP359;359:179)(AP360;360:180)(AP361;361:371)(AP362;362:372)(AP363;363:181)(AP364;364:182)(AP365;365:373)(AP366;366:374)(AP367;367:183)(AP368;368:184)(AP369;369:375)(AP370;370:376)(AP371;371:185)(AP372;372:186)(AP373;373:377)(AP374;374:378)(AP375;375:187)(AP376;376:188)(AP377;377:379)(AP378;378:380)(AP379;379:189)(AP380;380:190)(AP381;381:381)(AP382;382:382)(AP383;383:191)(SY0;384:384)
~snsShankMap=(4,2,640)(2:0:48:1)(2:1:240:1)(2:0:241:1)(2:1:49:1)(2:0:50:1)(2:1:242:1)(2:0:243:1)(2:1:51:1)(2:0:52:1)(2:1:244:1)(2:0:245:1)(2:1:53:1)(2:0:54:1)(2:1:246:1)(2:0:247:1)(2:1:55:1)(2:0:56:1)(2:1:248:1)(2:0:249:1)(2:1:57:1)(2:0:58:1)(2:1:250:1)(2:0:251:1)(2:1:59:1)(2:0:60:1)(2:1:252:1)(2:0:253:1)(2:1:61:1)(2:0:62:1)(2:1:254:1)(2:0:255:1)(2:1:63:1)(2:0:64:1)(2:1:256:1)(2:0:257:1)(2:1:65:1)(2:0:66:1)(2:1:258:1)(2:0:259:1)(2:1:67:1)(2:0:68:1)(2:1:260:1)(2:0:261:1)(2:1:69:1)(2:0:70:1)(2:1:262:1)(2:0:263:1)(2:1:71:1)(2:0:96:1)(2:1:288:1)(2:0:289:1)(2:1:97:1)(2:0:98:1)(2:1:290:1)(2:0:291:1)(2:1:99:1)(2:0:100:1)(2:1:292:1)(2:0:293:1)(2:1:101:1)(2:0:102:1)(2:1:294:1)(2:0:295:1)(2:1:103:1)(2:0:104:1)(2:1:296:1)(2:0:297:1)(2:1:105:1)(2:0:106:1)(2:1:298:1)(2:0:299:1)(2:1:107:1)(2:0:108:1)(2:1:300:1)(2:0:301:1)(2:1:109:1)(2:0:110:1)(2:1:302:1)(2:0:303:1)(2:1:111:1)(2:0:112:1)(2:1:304:1)(2:0:305:1)(2:1:113:1)(2:0:114:1)(2:1:306:1)(2:0:307:1)(2:1:115:1)(2:0:116:1)(2:1:308:1)(2:0:309:1)(2:1:117:1)(2:0:118:1)(2:1:310:1)(2:0:311:1)(2:1:119:1)(2:0:72:1)(2:1:264:1)(2:0:265:1)(2:1:73:1)(2:0:74:1)(2:1:266:1)(2:0:267:1)(2:1:75:1)(2:0:76:1)(2:1:268:1)(2:0:269:1)(2:1:77:1)(2:0:78:1)(2:1:270:1)(2:0:271:1)(2:1:79:1)(2:0:80:1)(2:1:272:1)(2:0:273:1)(2:1:81:1)(2:0:82:1)(2:1:274:1)(2:0:275:1)(2:1:83:1)(2:0:84:1)(2:1:276:1)(2:0:277:1)(2:1:85:1)(2:0:86:1)(2:1:278:1)(2:0:279:1)(2:1:87:0)(2:0:88:1)(2:1:280:1)(2:0:281:1)(2:1:89:1)(2:0:90:1)(2:1:282:1)(2:0:283:1)(2:1:91:1)(2:0:92:1)(2:1:284:1)(2:0:285:1)(2:1:93:1)(2:0:94:1)(2:1:286:1)(2:0:287:1)(2:1:95:1)(2:0:120:1)(2:1:312:1)(2:0:313:1)(2:1:121:1)(2:0:122:1)(2:1:314:1)(2:0:315:1)(2:1:123:1)(2:0:124:1)(2:1:316:1)(2:0:317:1)(2:1:125:1)(2:0:126:1)(2:1:318:1)(2:0:319:1)(2:1:127:1)(2:0:128:1)(2:1:320:1)(2:0:321:1)(2:1:129:1)(2:0:130:1)(2:1:322:1)(2:0:323:1)(2:1:131:1)(2:0:132:1)(2:1:324:1)(2:0:325:1)(2:1:133:1)(2:0:134:1)(2:1:326:1)(2:0:327:1)(2:1:135:1)(2:0:136:1)(2:1:328:1)(2:0:329:1)(2:1:137:1)(2:0:138:1)(2:1:330:1)(2:0:331:1)(2:1:139:1)(2:0:140:1)(2:1:332:1)(2:0:333:1)(2:1:141:1)(2:0:142:1)(2:1:334:1)(2:0:335:1)(2:1:143:1)(2:0:0:1)(2:1:384:1)(2:0:193:1)(2:1:1:1)(2:0:2:1)(2:1:194:1)(2:0:195:1)(2:1:3:1)(2:0:4:1)(2:1:196:1)(2:0:197:1)(2:1:5:1)(2:0:6:1)(2:1:198:1)(2:0:199:1)(2:1:7:1)(2:0:8:1)(2:1:200:1)(2:0:201:1)(2:1:9:1)(2:0:10:1)(2:1:202:1)(2:0:203:1)(2:1:11:1)(2:0:12:1)(2:1:204:1)(2:0:205:1)(2:1:13:1)(2:0:14:1)(2:1:206:1)(2:0:207:1)(2:1:15:1)(2:0:16:1)(2:1:208:1)(2:0:209:1)(2:1:17:1)(2:0:18:1)(2:1:210:1)(2:0:211:1)(2:1:19:1)(2:0:20:1)(2:1:212:1)(2:0:213:1)(2:1:21:1)(2:0:22:1)(2:1:214:1)(2:0:215:1)(2:1:23:1)(2:0:144:1)(2:1:336:1)(2:0:337:1)(2:1:145:1)(2:0:146:1)(2:1:338:1)(2:0:339:1)(2:1:147:1)(2:0:148:1)(2:1:340:1)(2:0:341:1)(2:1:149:1)(2:0:150:1)(2:1:342:1)(2:0:343:1)(2:1:151:1)(2:0:152:1)(2:1:344:1)(2:0:345:1)(2:1:153:1)(2:0:154:1)(2:1:346:1)(2:0:347:1)(2:1:155:1)(2:0:156:1)(2:1:348:1)(2:0:349:1)(2:1:157:1)(2:0:158:1)(2:1:350:1)(2:0:351:1)(2:1:159:1)(2:0:160:1)(2:1:352:1)(2:0:353:1)(2:1:161:1)(2:0:162:1)(2:1:354:1)(2:0:355:1)(2:1:163:1)(2:0:164:1)(2:1:356:1)(2:0:357:1)(2:1:165:1)(2:0:166:1)(2:1:358:1)(2:0:359:1)(2:1:167:1)(2:0:24:1)(2:1:216:1)(2:0:217:1)(2:1:25:1)(2:0:26:1)(2:1:218:1)(2:0:219:1)(2:1:27:1)(2:0:28:1)(2:1:220:1)(2:0:221:1)(2:1:29:1)(2:0:30:1)(2:1:222:1)(2:0:223:1)(2:1:31:1)(2:0:32:1)(2:1:224:1)(2:0:225:1)(2:1:33:1)(2:0:34:1)(2:1:226:1)(2:0:227:1)(2:1:35:1)(2:0:36:1)(2:1:228:1)(2:0:229:1)(2:1:37:1)(2:0:38:1)(2:1:230:1)(2:0:231:1)(2:1:39:1)(2:0:40:1)(2:1:232:1)(2:0:233:1)(2:1:41:1)(2:0:42:1)(2:1:234:1)(2:0:235:1)(2:1:43:1)(2:0:44:1)(2:1:236:1)(2:0:237:1)(2:1:45:1)(2:0:46:1)(2:1:238:1)(2:0:239:1)(2:1:47:1)(2:0:168:1)(2:1:360:1)(2:0:361:1)(2:1:169:1)(2:0:170:1)(2:1:362:1)(2:0:363:1)(2:1:171:1)(2:0:172:1)(2:1:364:1)(2:0:365:1)(2:1:173:1)(2:0:174:1)(2:1:366:1)(2:0:367:1)(2:1:175:1)(2:0:176:1)(2:1:368:1)(2:0:369:1)(2:1:177:1)(2:0:178:1)(2:1:370:1)(2:0:371:1)(2:1:179:1)(2:0:180:1)(2:1:372:1)(2:0:373:1)(2:1:181:1)(2:0:182:1)(2:1:374:1)(2:0:375:1)(2:1:183:1)(2:0:184:1)(2:1:376:1)(2:0:377:1)(2:1:185:1)(2:0:186:1)(2:1:378:1)(2:0:379:1)(2:1:187:1)(2:0:188:1)(2:1:380:1)(2:0:381:1)(2:1:189:1)(2:0:190:1)(2:1:382:1)(2:0:383:1)(2:1:191:1)
"""


class TestGlxMeta(unittest.TestCase):
    save_root: Final[Path] = Path('.test-ephys-cache-dir')
    file: Path = None

    @classmethod
    def setUpClass(cls):
        cls.file = p = cls.save_root / 'example_g0_t0.imec0.ap.meta'
        p.parent.mkdir(parents=True, exist_ok=True)
        with p.open('w') as f:
            print(EXAMPLE_SPIKE_GLX_META, file=f)

    @classmethod
    def tearDownClass(cls):
        if (p := cls.file) is not None:
            p.unlink(missing_ok=True)

    def test_load_meta(self):
        meta = GlxMeta(self.file)
        self.assertEqual(385, meta.total_channels)
        self.assertEqual(30000, meta.total_samples)
        self.assertEqual(30000, meta.sample_rate)
        self.assertEqual(1, meta.total_duration)

    @unittest.skipUnless(sys.version_info >= (3, 10), 'python version below 3.10')
    def test_load_channel_info(self):
        _ = GlxMeta(self.file).channel_info()

    @unittest.skipIf(sys.version_info >= (3, 10), 'python version above 3.9')
    def test_load_channel_info_under_py310(self):
        with self.assertRaises(AttributeError):
            GlxMeta(self.file).channel_info()


class TestGlxRecording(unittest.TestCase):
    save_root: Final[Path] = Path('.test-ephys-cache-dir')
    meta_file: Path = None
    bin_file: Path = None
    data: GlxRecording

    @classmethod
    def setUpClass(cls):
        cls.meta_file = p = cls.save_root / 'example_g0_t0.imec0.ap.meta'
        p.parent.mkdir(parents=True, exist_ok=True)
        with p.open('w') as f:
            print(EXAMPLE_SPIKE_GLX_META, file=f)

        cls.bin_file = p = cls.save_root / 'example_g0_t0.imec0.ap.bin'
        shape = (385, 30000)
        mem = np.memmap(p, shape=shape, dtype=np.int16, mode='w+', offset=0, order='F')
        mem[:] = 0

    @classmethod
    def tearDownClass(cls):
        if (p := cls.meta_file) is not None:
            p.unlink(missing_ok=True)
        if (p := cls.bin_file) is not None:
            p.unlink(missing_ok=True)

    def setUp(self):
        self.data = GlxRecording(self.meta_file)

    def test_load_file(self):
        _ = GlxRecording(self.meta_file)
        _ = GlxRecording(self.bin_file)

    def test_load_data(self):
        data = self.data
        self.assertEqual(385, data.total_channels)
        self.assertEqual(30000, data.total_samples)
        self.assertEqual(30000, data.sample_rate)
        self.assertEqual(1, data.total_duration)

    def test_data_read(self):
        self.assertEqual(385, len(self.data[:, 0]))
        self.assertEqual(30000, len(self.data[0, :]))
        self.assertEqual(0, self.data[0, 0])

    def test_data_read_out_of_bound(self):
        with self.assertRaises(IndexError):
            self.data[388, 0]

    @unittest.skipUnless(sys.version_info >= (3, 10), 'python version below 3.10')
    def test_load_channel_info(self):
        _ = self.data.channel_info()

    @unittest.skipIf(sys.version_info >= (3, 10), 'python version above 3.9')
    def test_load_channel_info_under_py310(self):
        with self.assertRaises(NotImplementedError):
            self.data.channel_info()


class TestGlxIndex(unittest.TestCase):
    def test_parse_filename(self):
        self.assertTupleEqual(GlxIndex('example', 0, '0', 0),
                              GlxIndex.parse_filename('example_g0_t0.imec0.ap.bin'))
        self.assertTupleEqual(GlxIndex('long_example_name', 1, '0', 1),
                              GlxIndex.parse_filename('long_example_name_g1_t0.imec1.ap.bin'))
        self.assertTupleEqual(GlxIndex('catgt_example', 1, 'cat', 0),
                              GlxIndex.parse_filename('catgt_example_g1_tcat.imec0.ap.bin'))
        self.assertTupleEqual(GlxIndex('catgt_example', 1, 'super', 0),
                              GlxIndex.parse_filename('catgt_example_g1_tsuper.imec0.ap.bin'))

    def test_as_cat_index(self):
        index = GlxIndex('example', 0, '0', 0)
        self.assertFalse(index.is_catgt)
        self.assertFalse(index.is_supercat)

        self.assertTupleEqual(GlxIndex('example', 0, 'cat', 0), ret := index.as_cat_index())
        self.assertTrue(ret.is_catgt)
        self.assertFalse(ret.is_supercat)

        self.assertTupleEqual(GlxIndex('example', 0, 'cat', 0), index.as_cat_index().as_cat_index())

    def test_as_super_index(self):
        index = GlxIndex('example', 0, '0', 0)
        self.assertFalse(index.is_catgt)
        self.assertFalse(index.is_supercat)

        self.assertTupleEqual(GlxIndex('example', 0, 'super', 0), index.as_super_index())
        self.assertTupleEqual(GlxIndex('example', 0, 'super', 0), index.as_cat_index().as_super_index())
        self.assertTupleEqual(GlxIndex('example', 0, 'super', 0), ret := index.as_super_index().as_super_index())
        self.assertTrue(ret.is_catgt)
        self.assertTrue(ret.is_supercat)

    @unittest.skip('directory name is SpikeGLX version depend')
    def test_dirname(self):
        index = GlxIndex('example', 0, '0', 0)
        self.assertEqual('', index.dirname())

    def test_filename(self):
        filename = 'example_g0_t0.imec0.ap.bin'
        index = GlxIndex.parse_filename('example_g0_t0.imec0.ap.bin')
        self.assertEqual(filename, index.filename())
        self.assertEqual('example_g0_t0.imec0.lf.bin', index.filename(f='lf'))
        self.assertEqual('example_g0_t0.imec0.ap.meta', index.filename(ext='.meta'))


if __name__ == '__main__':
    unittest.main()
